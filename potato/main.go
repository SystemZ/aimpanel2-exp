package main

import (
	"io/ioutil"
	"strconv"
	"strings"

	log "github.com/sirupsen/logrus"
	"gopkg.in/yaml.v2"
)

// schematype.go
// https://zhwt.github.io/yaml-to-go/

func parseArgs(schema AutoGenerated) []string {
	// parse variables in args
	var parsedArgs []string
	for _, arg := range schema.Spec.Container.Args {
		str := strings.Replace(arg, "{{ resources.memory.min }}", strconv.Itoa(schema.Spec.Resources.Memory.Min), -1)
		str = strings.Replace(str, "{{ resources.memory.max }}", strconv.Itoa(schema.Spec.Resources.Memory.Max), -1)
		parsedArgs = append(parsedArgs, str)
	}
	return parsedArgs
}

func main() {
	log.SetLevel(log.DebugLevel)

	// https://stackoverflow.com/questions/30947534/how-to-read-a-yaml-file
	var schema AutoGenerated
	yamlFile, err := ioutil.ReadFile("example.yml")
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, &schema)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}

	log.Printf("Starting %v ...", schema.Metadata.Name)

	// read file
	//data, err := ioutil.ReadFile("./example.json")
	//if err != nil {
	//	fmt.Print(err)
	//}
	//fmt.Printf("%v", data)

	for index, element := range schema.Spec.Actions.BeforeStart {
		log.Printf("Running before start action #%v %v", index+1, element.Name)
		// index is the index where we are
		// element is the element from someSlice for where we are
	}

	// run container
	argsJoinedUnparsed := strings.Join(schema.Spec.Container.Args, " ")
	argsJoinedParsed := strings.Join(parseArgs(schema), " ")
	log.Debugf("Running container with unparsed args: %v", argsJoinedUnparsed)
	log.Debugf("Running container with parsed args: %v", argsJoinedParsed)
}

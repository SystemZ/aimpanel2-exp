stages:
  #- test
  - compile
  - build
  - deploy

#include:
#  - template: Code-Quality.gitlab-ci.yml
# this doesn't support Go right now (2019-10-17)
# https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html#example-configuration
# https://gitlab.com/gitlab-org/security-products/codequality

frontend:
  stage: compile
  image: node:10-alpine
  script:
    - cd master-frontend
    - apk add yarn
    - yarn install --frozen-lockfile
    - VUE_APP_API_URL="" yarn build
    - ls -alh dist
    - mv dist $CI_PROJECT_DIR/aimpanel-master-frontend
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - master-frontend/node_modules
  artifacts:
    paths:
      - aimpanel-master-frontend
    expire_in: 1 month
  only:
    - master
    - merge_requests
  tags:
    - docker

backend:
  stage: compile
  image: golang:latest
  script:
    - apt-get update
    - apt-get install -y upx
    #- go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/aimpanel-master
    #- go test -race $(go list ./... | grep -v /vendor/)
    - CGO_ENABLED=0 go build -ldflags "-X gitlab.com/systemz/aimpanel2/master/config.GIT_COMMIT=$CI_COMMIT_SHA" -o $CI_PROJECT_DIR/aimpanel-master gitlab.com/systemz/aimpanel2/master
    # requirements for journald integration
    - apt-get update && apt-get install -q -y libsystemd-dev
    - go build -ldflags "-X gitlab.com/systemz/aimpanel2/slave/config.GIT_COMMIT=$CI_COMMIT_SHA" -o $CI_PROJECT_DIR/aimpanel-slave-raw gitlab.com/systemz/aimpanel2/slave
    # pack slave binary for smaller disk footprint
    - upx -9 -o $CI_PROJECT_DIR/aimpanel-slave $CI_PROJECT_DIR/aimpanel-slave-raw
    # generate RESTful API spec
    - go get github.com/swaggo/swag/cmd/swag
    - bash Taskfile.sh ci-swagger-gen
    # generate code report
    - go get github.com/jstemmer/go-junit-report
    - go test -v $(go list ./... | grep -v /src/)
    - go test -v $(go list ./... | grep -v /src/) 2>&1 | go-junit-report > $CI_PROJECT_DIR/report.xml
    # tests at the end to still allow artifacts uploading
    - go fmt $(go list ./... | grep -v /src/) || true
    - go vet $(go list ./... | grep -v /src/)
    # binaries built and tested, upload binary and install script, cleanup old files after
    - bash Taskfile.sh ci-slave-upload
  cache:
    key: "$CI_JOB_NAME-src"
    paths:
      - $GOPATH/src
  artifacts:
    # https://docs.gitlab.com/ee/ci/yaml/README.html#artifactsreportscodequality-starter
    reports:
      junit: report.xml
    paths:
      - aimpanel-master
      - aimpanel-slave
      - install.sh
      - swagger.json
      - report.xml
    when: always
  only:
    - master
    - merge_requests
  tags:
    - docker

redis:
  stage: compile
  image: ubuntu:18.04
  variables:
    REDIS_VERSION: "5.0.7"
    REDIS_DOWNLOAD_URL: "http://download.redis.io/releases/redis-5.0.7.tar.gz"
    REDIS_DOWNLOAD_SHA: "61db74eabf6801f057fd24b590232f2f337d422280fd19486eca03be87d3a82b"
  script:
    - bash Taskfile.sh ci-redis-compile
    - bash Taskfile.sh ci-redis-upload
  artifacts:
    paths:
      - redis-server
  tags:
    - docker
  when: manual

docker-image:
  stage: build
  image: docker:stable
  services:
    - docker:stable-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  only:
    - master
    - merge_requests
  tags:
    - docker

.deploy:
  stage: deploy
  image: alpine:latest
  script:
    - apk add --no-cache curl git bash gawk
    - curl -X POST -F token=$INFRA_TOKEN -F "ref=master" -F "variables[SERVICE_NAME]=aimpanel-lab" -F "variables[SERVICE_VERSION]=pipeline-$CI_PIPELINE_ID" https://gitlab.com/api/v4/projects/6986946/trigger/pipeline
    - bash Taskfile.sh update-todo-issue
  only:
    - master

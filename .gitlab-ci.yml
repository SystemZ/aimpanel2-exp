image: golang:latest

variables:
  REPO_NAME: gitlab.com/systemz/aimpanel2

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
    - test
    - build
    - build-docker
    #- deploy

format:
    stage: test
    script:
      - go get -u github.com/jstemmer/go-junit-report
      - cd master
      - go get
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)
      - go test -race $(go list ./... | grep -v /vendor/)
      - go test -v 2>&1 | go-junit-report > $CI_PROJECT_DIR/report.xml
    artifacts:
      reports:
        junit: report.xml

compile-frontend:
    stage: build
    image: node:10-alpine
    script:
      - cd master-frontend
      - npm install &>/dev/null
      - npm run build
      - ls -alh dist
      - mv dist $CI_PROJECT_DIR/aimpanel-master-frontend
    artifacts:
      paths:
        - aimpanel-master-frontend
      expire_in: 1 month

compile-backend:
    stage: build
    script:
      - cd ./master
      - go get
      # - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/aimpanel-master
      - CGO_ENABLED=0 go build -o $CI_PROJECT_DIR/aimpanel-master
      - cd ../wrapper
      - go get
      - CGO_ENABLED=0 go build -o $CI_PROJECT_DIR/aimpanel-wrapper
      #- cd ../agent
      #- go get
      #- CGO_ENABLED=0 go build -o $CI_PROJECT_DIR/aimpanel-agent
    artifacts:
      paths:
        - aimpanel-master
        - aimpanel-wrapper
        #- aimpanel-agent
      expire_in: 1 month

build-master:
    stage: build-docker
    image: docker:stable
    services:
    - docker:stable-dind
    script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:pipeline-$CI_PIPELINE_ID --tag $CI_REGISTRY_IMAGE:latest -f master.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:pipeline-$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE:latest

build-wrapper:
    stage: build-docker
    image: docker:stable
    services:
    - docker:stable-dind
    script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:pipeline-$CI_PIPELINE_ID --tag $CI_REGISTRY_IMAGE:latest -f wrapper.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:pipeline-$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE:latest

.build-agent:
    stage: build-docker
    image: docker:stable
    services:
    - docker:stable-dind
    script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:pipeline-$CI_PIPELINE_ID --tag $CI_REGISTRY_IMAGE:latest -f agent.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:pipeline-$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE:latest